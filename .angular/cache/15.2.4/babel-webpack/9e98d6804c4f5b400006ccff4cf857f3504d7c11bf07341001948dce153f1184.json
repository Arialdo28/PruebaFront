{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthorService {\n  constructor(http) {\n    this.http = http;\n    this.url = 'https://poetrydb.org/author';\n  }\n  //  cargarInfo() {\n  //    this.http.get<String[]>(this.url).subscribe(datos => {\n  //      lista = datos;\n  //    });\n  //    this.guardar(lista);\n  //  }\n  getAll() {\n    return this.http.get(this.url);\n  }\n  guardar(lista) {\n    localStorage.setItem(\"authores\", lista.toString());\n  }\n  eliminar(author) {\n    localStorage.getItem(\"authores\");\n  }\n}\nAuthorService.ɵfac = function AuthorService_Factory(t) {\n  return new (t || AuthorService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthorService,\n  factory: AuthorService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAOA,OAAM,MAAOA,aAAa;EAGxBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFf,QAAG,GAAG,6BAA6B;EAEJ;EAE1C;EACA;EACA;EACA;EACA;EACA;EAEEC,MAAM;IACJ,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAW,IAAI,CAACC,GAAG,CAAC;EAC1C;EAEAC,OAAO,CAACC,KAAe;IACrBC,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEF,KAAK,CAACG,QAAQ,EAAE,CAAC;EACpD;EAEAC,QAAQ,CAACC,MAAc;IACrBJ,YAAY,CAACK,OAAO,CAAC,UAAU,CAAC;EAClC;;AAtBWb,aAAa;mBAAbA,aAAa;AAAA;AAAbA,aAAa;SAAbA,aAAa;EAAAc,SAAbd,aAAa;EAAAe,YAFZ;AAAM","names":["AuthorService","constructor","http","getAll","get","url","guardar","lista","localStorage","setItem","toString","eliminar","author","getItem","factory","providedIn"],"sourceRoot":"","sources":["E:\\PruebaViam\\PruebaFront\\PruebaFront\\src\\app\\servicios\\author\\author.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Author } from 'src/app/modelo/Author';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthorService {\n  readonly url = 'https://poetrydb.org/author'\n\n  constructor(private http: HttpClient) { }\n\n//  cargarInfo() {\n//    this.http.get<String[]>(this.url).subscribe(datos => {\n//      lista = datos;\n//    });\n//    this.guardar(lista);\n//  }\n\n  getAll() {\n    return this.http.get<string[]>(this.url);\n  }\n\n  guardar(lista: String[]) {\n    localStorage.setItem(\"authores\", lista.toString());\n  }\n\n  eliminar(author: String) {\n    localStorage.getItem(\"authores\");\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}